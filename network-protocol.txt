WS payload format

CLIENT -> SERVER

join
{
  type: 'join'
  data: {
    passcode: STRING
  }
}

play
{
  type: 'play'
  data: {
    name: STRING
  }
}

syncReq
{
  type: 'syncReq'
}

syncAck2
{
  type: 'syncAck2'
}

controlInput
{
  type: 'controlInput'
  data: {
    movement: NUMBER,
    action: ENUM,
  }
}


SERVER -> CLIENT

joinAck
{
  type: 'joinAck',
  data: {
    id: NUMBER
    sessionData
  }
}

playAck
{
  type: 'playAck'
}

syncAck
{
  type: 'syncAck',
  data: [gameSnapshot]
}

killed
{
  type: 'killed'
}

sessionData
{
  type: 'sessionData',
  data: {
    id: NUMBER,
    sessionData: {
      name: STRING
    }
  }
}

gameStateSnapshot
{
  type: 'state',
  data: {
    players: [{
      position: COORD,
      name: STRING,
      id: NUMBER,
      points: NUMBER
    }],
    field: [{
      coord: COORD,
      status: ENUM
    }]
  }
}


----------------------Shared----------------------------------

playerSnapshot: {
  movement: {
    left: boolean,
    right: boolean,
    up: boolean,
    down: boolean
  },
  action?: fireAction
}

fireAction: {
  actionType: 'fire',
  angle: number
}


-------------------Client to Server---------------------------
joinReq: {
  type: 'joinReq',
  data: string (name)
}

syncReq: {
  type: 'syncReq'
}

playerState: {
  type: 'playerState'
  data: [playerSnapshot]
}

playerSnapshot: {
  movement: {
    left: boolean,
    right: boolean,
    up: boolean,
    down: boolean
  }
  action?: fireAction
}

------------------------Server to Client----------------------

joinAck: {
  type: 'joinAck',
  data: {
    playerId: number,
    otherPlayersInGame: [joinData]
  }
}

joinNack: {
  type: 'joinNack',
  data: string (reason)
}

syncTrig: {
  type: 'syncTrig'
}

syncAck: {
  type: 'syncAck'
  data: [syncData]

syncData: {
  playerId: number,
  position: { x: number, y: number }
}

playerJoin: {
  type: 'playerJoin',
  data: joinData
}

joinData: {
  name: string,
  playerId: number,
  position: { x: number, y: number }
}

gameState: {
  type: 'gameState'
  data: [gameSnapshot]
}

gameSnapshot: [playerState]

playerState: {
  playerId: number,
  snapshots: [playerSnapshot]
}

playerSnapshot: {
  movement: {
    left: boolean,
    right: boolean,
    up: boolean,
    down: boolean
  },
  action?: fireAction
}
